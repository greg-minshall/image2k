#!/usr/bin/env Rscript

# read in an image file, output the md5 hash of its channels

## apparently pixmap (which comes in with image2k) requires methods,
## and quietly=TRUE doesn't seemt to propagate down.
require(methods, quietly=TRUE);
require(digest, quietly=TRUE);
require(getopt, quietly=TRUE);
## image2k is required below (in case it comes from a special library)

usage <- function(spec) {
  cat(getopt(spec, usage=TRUE));
  q(status=1);
}


md5.image2k <- function(file, pref.lib=NULL) {
  comps <- strsplit(file, .Platform$file.sep)[[1]];
  lcomp <- comps[length(comps)];
  im2k <- p2k.read(file, pref.lib=pref.lib);
  res <- matrix(nrow=0, ncol=4);
  for (chan in sort(im2k@channels)) {
    res <- rbind(res, c(file=lcomp,
                        lib=pref.lib,
                        chan=chan,
                        md5=digest(slot(im2k, chan),algo="md5")));
  }
  res;
}

parserun <- function(args) {
  spec <- matrix(c(
    "compare",    "c", 1, "character", "file against which to compare",
    "file",       "f", 1, "character", "file to process",
    "help",       "h", 0, "logical",   "print this usage information",
    "image2klib", "i", 1, "character", "library location of image2k library",
    "pref.lib",   "p", 1, "character", "string with one or two unique characters from  {2, k} (which library to use)",
    "suffix",     "s", 1, "character", "if no -c, suffix for end of file name to find compare file",
    "verbose",    "v", 0, "logical",   "normally taciturn, give a bit more feedback"
    ), byrow=TRUE, ncol=5);

  opts <- getopt(spec=spec, opt=args);

  if (!is.null(opts$help)) {
    usage(spec);
  }

  if (is.null(opts$file)) {
    cat("--file|-f not specified\n");
    usage(spec);
  }

  file <- opts$file;

  if (is.null(opts$image2klib)) {
    require(image2k, quietly=TRUE);
  } else {
    require(image2k, lib.loc=opts$image2klib, quietly=TRUE);
  }

  ## now, read in the standard against which we should compare (the
  ## *existence* of one of these means we are consuming, not
  ## generating)
  if (!is.null(opts$compare)) {
    docompare <- TRUE;
    if (!is.null(opts$suffix)) {
      cat("may specify only one of --compare|-c and --suffix|-s\n");
      usage(spec);
    }
    cname <- opts$compare;
  } else if (!is.null(opts$suffix)) {
    docompare <- TRUE;
    cname <- paste(file, opts$suffix, sep="");
  } else {
    docompare <- FALSE;
  }

  res <- md5.image2k(file=file, pref.lib=opts$pref.lib);

  res <- res[order(res[,"chan"]),];
  if (docompare) {
    cvalue <- as.matrix(read.table(cname, colClasses=c("character")));
    colnames(cvalue) <- colnames(res);
    cvalue <- cvalue[order(cvalue[,"chan"]),];
  }

  if (docompare) {
    if (!identical(as.matrix(cvalue), as.matrix(res))) {
      cat(sprintf("%s %s differ\n", file, cname));
      q(status=1);
    } else if (!is.null(opts$verbose)) {
      cat(sprintf("%s %s identical\n", file, cname));
    }
  } else {
    for (i in 1:nrow(res)) {
      cat(sprintf("%s %s %s %s\n", res[i,"file"], res[i, "lib"], res[i,"chan"], res[i,"md5"]));
    }
  }
}

if (!is.na(get_Rscript_filename())) {
  ## if we are called from Rscript, parse arguments and run the command
  parserun(commandArgs(TRUE));
} else {
  ## run somes tests
  file <- "c-L1001745.png";
  if (!file.exists(file)) {
    file <- paste("tests/", file, sep="");
    if (!file.exists(file)) {
      system("pwd");
      cat(sprintf("can't find %s or %s\n", basename(file), file));
      q(1);
    }
  }
  stemp <- "_%s_md5.GOLD";
  ## first, make sure we read as we used to...
  if (@have_imlib2@) {
    suffix2 <- sprintf(stemp, "2");
    parserun(
      c(
        strsplit(
          sprintf("-f %s --pref.lib 2 --suffix %s", file, suffix2),
          split=" ")[[1]]));
  }
  if (@have_magickwand@) {
    suffixk <- sprintf(stemp, "k");
    parserun(
      c(
        strsplit(
          sprintf("-f %s --pref.lib k --suffix %s", file, suffixk),
          split=" ")[[1]]));
  }
  ## now, read in an image, then write it out, read it back in using
  ## the same method as we used to write it out, and make sure it
  ## agrees
  bn <- basename(file);
  a <- strsplit(bn, "[.]")[[1]];
  ext <- sprintf(".%s", a[length(a)]);
  outfile <- tempfile(fileext=ext);
  ## (we're not trying to test Imlib2 or MagickWand, so one output
  ## format seems sufficient)
  status <- 0;
  vec <- c();
  if (@have_imlib2@) {
    vec <- c(vec, "2");
  }
  if (@have_magickwand@) {
    vec <- c(vec, "k");
  }
  for (i in vec) {
    x <- p2k.read(file, pref.lib=i);
    p2k.write(file=outfile, pm=x, pref.lib=i);
    y <- p2k.read(file, pref.lib=i);
    if (!identical(x,y)) {
      cat(sprintf("round trip error: using pref.lib=%s, read %s, wrote it, read it back, and it wasn't the same\n"));
      status=1;
    }
  }
  if (status != 0) {
    q(status=status);
  }
}
