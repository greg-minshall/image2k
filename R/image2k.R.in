calc.usemagickwand <- function(pref.lib="2k") {
  ## passed down from configure.am, via image2k.R.in, to image2k.R
  have_imlib2 = @have_imlib2@;
  have_magickwand = @have_magickwand@;

  if (is.null(pref.lib)) {
    pref.lib <- formals(calc.usemagickwand)$pref.lib;
  }
  
  if ((!have_imlib2) && (!have_magickwand)) {
    stop(
      "read.image2k: installation error: neither Imlib2 nor Magickwand available");
  }

  ## check argument
  if ((nchar(pref.lib) > 2) ||
      (length(grep("[^2k]", pref.lib)) != 0)) {
    stop(sprintf(
      "read.image2k: pref.lib=\"%s\": can only specify one or two of \"2\" and \"k\"",
      pref.lib));
  }

  if (substr(pref.lib, 1, 1) == "k") {  # wants magickwand
    if (have_magickwand) {
      return(TRUE);
    } else if ((nchars(pref.lib) > 1) && (substr(pref.lib, 2, 1) == "2")) {
    ## no magickwand.  will they accept imlib2?
      return(FALSE);
    } else {                            # sorry, your choice isn't available
      stop(sprintf(
        "read.image2k: pref.lib=\"%s\": MagickWand is not avalable on this system",
        pref.lib));
    }
  } else if (substr(pref.lib, 1, 1) == "2") {
    if (have_imlib2) {
      return(FALSE);
    } else if ((nchar(pref.lib) > 1) && (substr(pref.lib, 2, 1) == "k")) {
      return(TRUE);
    } else {
      stop(sprintf(
        "read.image2k: pref.lib=\"%s\": Imlib2 is not avalable on this system",
        pref.lib));
    }
  } else {                              # we shouldn't get here (hah!)
    stop(sprintf(
      "read.image2k: pref.lib=\"%s\": programming error (sorry!).",
      pref.lib));
  }
}

## with the default parameters with.imlib2=TRUE, with.magick=TRUE, it
## is implementation dependent which library will be used for a given
## image.
read.image2k <- function(file, pref.lib="2k") {
  ## the C code has only "usemagickwand".  we get there from pref.lib
  usemagickwand <- calc.usemagickwand(pref.lib=pref.lib);

  im2k <- .External("image2kread", file=file, usemagickwand=usemagickwand);
  
  if ((!all(dim(im2k$red) == dim(im2k$green))) ||
      (!all(dim(im2k$green) == dim(im2k$blue)))) {
    stop("R, G, and B matrices must be of the same size");
  }

  ## duplicate some code from pixmap.R (for efficiency)
  datamax <- max(im2k$red, im2k$green, im2k$blue);
  datamin <- min(im2k$red, im2k$green, im2k$blue);

  if(datamax>1 || datamin<0) {
    im2k$red <- (im2k$red - datamin)/(datamax-datamin);
    im2k$green <- (im2k$green - datamin)/(datamax-datamin);
    im2k$blue <- (im2k$blue - datamin)/(datamax-datamin);
  }

  z = new("pixmapRGB", pixmap(im2k$red, cellres=1));
  z@red = im2k$red;
  z@green = im2k$green;
  z@blue = im2k$blue;

  z
}

write.image2k <- function(file, pm, depth=8, pref.lib="2k") {
  usemagickwand <- calc.usemagickwand(with.imlib2=with.imlib2,
                                      with.magickwand=with.magickwand);

  .External("image2kwrite", file=file,
            red=pm@red, green=pm@green, blue=pm@blue,
            depth=depth, usemagickwand=usemagickwand);
}
