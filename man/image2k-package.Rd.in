\name{image2k-package}

\alias{image2k}
\alias{p2k.read}
\alias{p2k.write}

\docType{package}

\title{create pixmap images from various image file formats}

\description{
  Image2k allows pixmap images to be read from, or written to, files of
  various image file formats, using Imlib2 and/or ImageMagick's
  WandMagick interface.
}
\usage{
p2k.read(file, pref.lib="2k")
p2k.write(file, pm, depth=8, pref.lib="2k")
}
\arguments{
  \item{file}{pathname of file to read or write}
  \item{pm}{pixmap containing image to be written}
  \item{depth}{number of bits per pixel channel; normally 8, sometimes
    16.}
  \item{pref.lib}{a character string consisting of at most one character
  each from the set \{"2", "k"\}}
}

\details{
\tabular{ll}{
Package: \tab image2k\cr
Type: \tab Package\cr
Version: \tab @VERSION@\cr
Date: \tab 2014-06-24\cr
License: \tab MIT\cr
}

The
\href{http://cran.r-project.org/web/packages/pixmap/index.html}{pixmap}
package is able to read and write
\href{https://en.wikipedia.org/wiki/Netpbm_format}{NetPBM} files.  An
add-on package
\href{http://cran.r-project.org/web/packages/rtiff/index.html}{rtiff}
allows a pixmap image to be created from
\href{https://en.wikipedia.org/wiki/Tagged_Image_File_Format}{TIFF}
files (through the use of the
\href{http://www.remotesensing.org/libtiff/}{libtiff} library).  Both
pixmap and rtiff have other functions.

Image2k is another add-on to pixmap, and adds the ability to read or
write image files in any format that is understood by either the
\href{http://docs.enlightenment.org/api/imlib2/html/}{Imlib2} libraries
or Imagemagick\'s
\href{http://www.imagemagick.org/script/magick-wand.php}{MagickWand}
libraries.  (Of course, one or both of these libraries needs to be
installed on your machine at the time image2k is installed, and is run,
for this to be possible.)

\code{p2k.read} reads an image file, and returns a pixmapRGB with
that files contents in it.

\code{p2k.writewrite} attempts to write the image contained in pm to
the image file.  the depth of the image (default \code{8}) can be
specified.

note that image file formats are determined (by whichever of the Imlib2
or MagickWand libraries is called) based on the filename extension.  so,
a file of foo.jpg would be assumed to be a JPEG file.

the pref.lib parameter gives a preference ordering for the image
libaries to use to perform the operation, where "2" corresponds to
Imlib2, and "k" corresponds to MagickWand.  a string "2k" (the default)
means use Imlib2 if it's available on the system, otherwise use
Magickwand.  on the other hand, specifying "2" means use Imlib2 if it's
available on the system, otherwise fail.  (NB: it is *NOT* the case that
image2k will switch over to the second library specified if, for some
reason the first library exists but is unable to perform the operation
on the specified file; the first library that exists on the system, in
the order specified in pref.lib, will be used and, if it fails, the
image2k operation will also fail.)

}
\value{
  \code{p2k.read}, if succesful, returns a pixmapRGB object.
}
\author{
Greg Minshall <\email{minshall@acm.org}>
}
\keyword{ package }
\seealso{
\code{\link{pixmap}}
\code{\link[rtiff]{rtiff}}
}
\examples{
## a simple program to read in a variable number of files (of the
## same dimension) and produce an output where each pixel is the
## average of the values in the corresponding locations in the
## input files.

\dontrun{
chkcompat <- function(pm1, pm2) {
  ## make sure the images have the same channels
  if (!all(pm1@channels == pm2@channels)) {
    stop("images have different color channels: \"%s\" versus \"%s\"",
         sprintf("%s ", pm1@channels), sprintf("%s ", pm2@channels));
  }
  ## make sure the images have the same size
  if (!all(pm1@size == pm2@size)) {
    stop(sprintf("images have different sizes: %dx%d versus %dx%d",
                 pm1@size[1], pm1@size[2], pm2@size[1], pm2@size[2]));
  }
}



imagemean <- function(file, output=NULL, ...) {
  ##  flatten input.  file may have been specified c(file1, file2,
  ## ...), and this will take care of that
  files <- c(file, ...);

  if ((!missing(output)) && file.exists(output)) {
    stop(sprintf("attempt to overwrite an existing file: %s", output));
  }

  nfiles = 0;
  for (f in files) {
    pm <- p2k.read(f, ...);
    if (nfiles == 0) {
      sum <- pm;
    } else {
      ## add everything up
      for (chan in sum@channels) {
        slot(sum, chan) = slot(sum, chan) + slot(pm, chan);
      }
    }
    nfiles = nfiles+1;
  }

  for (chan in sum@channels) {
    slot(sum, chan) = slot(sum, chan)/nfiles;
  }

  if (is.null(output)) {
    return(sum);
  } else {
    p2k.write(output, pm);
  }
}
}
}
