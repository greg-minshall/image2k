## dyn.load("rimage2k.dylib");

my.pixmapRGB = function(matrixR, matrixG, matrixB, ...) {
  if ((!all(dim(matrixR) == dim(matrixG))) ||
      (!all(dim(matrixG) == dim(matrixB)))) {
    stop("R, G, and B matrices must be of the same size");
  }

  z = new("pixmapRGB", pixmap(matrixR, ...));

  datamax <- max(matrixR, matrixG, matrixB);
  datamin <- min(matrixR, matrixG, matrixB);

#  matrixR <- as.numeric(matrixR);
#  matrixG <- as.numeric(matrixG);
#  matrixB <- as.numeric(matrixB);
  if(datamax>1 || datamin<0) {
    matrixR <- (matrixR - datamin)/(datamax-datamin);
    matrixG <- (matrixG - datamin)/(datamax-datamin);
    matrixB <- (matrixB - datamin)/(datamax-datamin);
  }

  z@red = matrixR;
  z@green = matrixG;
  z@blue = matrixB;

  z
}

## with the default parameters with.imlib2=TRUE, with.magick=TRUE, it
## is implementation dependent which library will be used for a given
## image.
read.image2k <- function(file, with.imlib2=TRUE, with.magickwand=TRUE, ...) {
  if (!(with.imlib2 || with.magickwand)) {
    stop("read.image2k: can't turn off *both* with.imlib2 *and* with.magickwand");
  }

  if (@have_imlib2@ && @have_magickwand@) {
    if (with.imlib2 && with.magickwand) {
      usemagickwand = FALSE;            # XXX default, sort of
    } else if (with.imlib2) {
      usemagickwand = FALSE;
    } else if (with.magickwand) {
      usemagickwand = TRUE;
    }
  } else if (@have_imlib2@) {
    if (with.imlib2) {
      usemagickwand = FALSE;
    } else {
      stop("read.image2k: with_imlib=FALSE: no magickwand, so with.imlib2 can only be true");
    }
  } else if (@have_magickwand@) {
    if (with.magickwand) {
      usemagickwand = TRUE;
    } else {
      stop("read.image2k: with.magick=FALSE: no magickwand, so with.imlib2 can only be true");
    }
  } else {
    stop("read.image2k: should not occur: neither Imlib2 nor MagickWand available (so, initial install should have failed)");
  }

  im2k <- .External("rimageread", file, usemagickwand=usemagickwand);

  # cheap matrix tricks (because: for performance, we want to keep
  # copying to a minimum; if we call my.pixmapRGB with vectors, and
  # *it* turns the vectors into matrices, we incur a copy)
  dims <- c(im2k$nr, im2k$nc);
  dim(im2k$red) <- dims;
  dim(im2k$green) <- dims;
  dim(im2k$blue) <- dims;
  pm <- my.pixmapRGB(im2k$red, im2k$green, im2k$blue);

  pm;
}

write.image2k <- function(file, pmap, with.imlib2=TRUE, with.magickwand=TRUE) {
}
